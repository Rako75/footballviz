# -*- coding: utf-8 -*-
"""Exemple_VisualisationInteractive_Football.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15AyFeiUPlt1Q6tOTJpXYV6lI1EYOr2D-
"""

import pandas as pd
import numpy as np
import plotly.express as px
import streamlit as st

# Charger les fichiers CSV
@st.cache
def load_position_data():
    attaquants = pd.read_csv("Bundesliga_Attaquant.csv")
    defenseurs = pd.read_csv("Bundesliga_Défenseur.csv")
    milieux = pd.read_csv("Bundesliga_Milieu.csv")

    # Ajout de la position pour chaque dataset
    attaquants["Position"] = "Attaquant"
    defenseurs["Position"] = "Défenseur"
    milieux["Position"] = "Milieu"

    # Combiner les datasets
    full_data = pd.concat([attaquants, defenseurs, milieux], ignore_index=True)
    return full_data

data = load_position_data()

# Critères pertinents par position
criteria_by_position = {
    "Attaquant": ["Buts", "Passes decisives", "Buts + Passes decisives", "Buts hors penalty",
                  "xG", "xAG", "Tirs", "Touches dans la surface adverse", "Passes progressives", "Courses progressives"],
    "Milieu": ["Passes progressives", "Passes vers le dernier tiers", "Passes dans la surface adverse",
               "xAG", "Touches", "Interceptions", "Tacles reussis", "Touches dans le tiers défensif"],
    "Défenseur": ["Interceptions", "Tacles reussis", "Dégagements", "Touches dans le tiers défensif",
                  "Passes progressives", "Passes longues reussies"]
}

# Normalisation des colonnes pertinentes
def normalize_series(series):
    return (series - series.min()) / (series.max() - series.min())

for criteria_list in criteria_by_position.values():
    for col in criteria_list:
        if col in data.columns:
            data[col + "_normalized"] = normalize_series(data[col])

# Création du radarchart
def create_radarchart(player_name, data, criteria_by_position):
    # Filtrer les données pour le joueur sélectionné
    player_data = data[data["Joueur"] == player_name].iloc[0]
    position = player_data["Position"]

    # Critères pertinents pour la position
    criteria = criteria_by_position.get(position, [])
    criteria_normalized = [col + "_normalized" for col in criteria]

    # Extraire les valeurs et les critères
    stats = player_data[criteria_normalized].values
    radar_data = pd.DataFrame({
        "Critères": criteria,
        "Valeurs": stats
    })

    # Création du radar avec Plotly
    fig = px.line_polar(radar_data, r="Valeurs", theta="Critères", line_close=True)
    fig.update_traces(fill="toself")
    fig.update_layout(title=f"Radarchart de {player_name} ({position})", polar=dict(radialaxis=dict(visible=True)))

    return fig

# Interface utilisateur Streamlit
st.title("Radarchart interactif des joueurs de Bundesliga")

# Affichage des données
st.write("Aperçu des données combinées :")
st.dataframe(data.head())

# Menu déroulant pour choisir un joueur
player_name = st.selectbox("Choisissez un joueur :", data["Joueur"].unique())

# Génération du radar pour le joueur sélectionné
if player_name:
    fig = create_radarchart(player_name, data, criteria_by_position)
    st.plotly_chart(fig)