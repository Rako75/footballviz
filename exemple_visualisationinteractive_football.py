# -*- coding: utf-8 -*-
"""Exemple_VisualisationInteractive_Football.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15AyFeiUPlt1Q6tOTJpXYV6lI1EYOr2D-
"""

import pandas as pd
import numpy as np
import plotly.express as px
import streamlit as st

# Chargement des données
@st.cache
def load_data():
    # Remplacez 'Bundesliga.csv' par votre fichier contenant toutes les positions
    df = pd.read_csv('Bundesliga.csv')
    return df

data = load_data()

# Vérification des colonnes nécessaires
required_columns = [
    "Joueur", "Position", "Age", "Equipe",
    "Buts", "Passes decisives", "Buts + Passes decisives", "Buts hors penalty",
    "xG", "xAG", "Tirs", "Touches dans la surface adverse", "Passes progressives",
    "Courses progressives", "Interceptions", "Tacles reussis", "Passes vers le dernier tiers",
    "Passes dans la surface adverse", "Touches dans le tiers defensif", "Dégagements"
]
missing_columns = [col for col in required_columns if col not in data.columns]
if missing_columns:
    st.error(f"Les colonnes suivantes sont manquantes dans le dataset : {', '.join(missing_columns)}")
    st.stop()

# Critères par position
criteria_by_position = {
    "Attaquant": ["Buts", "Passes decisives", "Buts + Passes decisives", "Buts hors penalty",
                  "xG", "xAG", "Tirs", "Touches dans la surface adverse", "Passes progressives", "Courses progressives"],
    "Milieu": ["Passes progressives", "Passes vers le dernier tiers", "Passes dans la surface adverse",
               "xAG", "Touches", "Interceptions", "Tacles reussis", "Touches dans le tiers defensif"],
    "Défenseur": ["Interceptions", "Tacles reussis", "Dégagements", "Touches dans le tiers defensif",
                  "Passes progressives", "Passes longues reussies"]
}

# Traduction ou validation des positions
data["Position"] = data["Position"].map({"Forward": "Attaquant", "Midfielder": "Milieu", "Defender": "Défenseur"})

# Normalisation des données pour les critères
def normalize_series(series):
    return (series - series.min()) / (series.max() - series.min())

for col in required_columns[4:]:  # Normaliser uniquement les statistiques
    if col in data.columns:
        data[col + "_normalized"] = normalize_series(data[col])

# Création du radarchart
def create_radarchart(player_name, data, criteria_by_position):
    # Filtrer les données pour le joueur sélectionné
    player_data = data[data["Joueur"] == player_name].iloc[0]
    position = player_data["Position"]

    # Critères pertinents pour la position
    criteria = criteria_by_position.get(position, [])
    criteria_normalized = [col + "_normalized" for col in criteria]

    # Extraire les valeurs et les critères
    stats = player_data[criteria_normalized].values
    radar_data = pd.DataFrame({
        "Critères": criteria,
        "Valeurs": stats
    })

    # Création du radar avec Plotly
    fig = px.line_polar(radar_data, r="Valeurs", theta="Critères", line_close=True)
    fig.update_traces(fill="toself")
    fig.update_layout(title=f"Radarchart de {player_name} ({position})", polar=dict(radialaxis=dict(visible=True)))

    return fig

# Interface utilisateur Streamlit
st.title("Radarchart interactif des joueurs de football - Bundesliga")

# Menu déroulant pour choisir un joueur
player_name = st.selectbox("Choisissez un joueur :", data["Joueur"].unique())

# Génération du radar pour le joueur sélectionné
if player_name:
    fig = create_radarchart(player_name, data, criteria_by_position)
    st.plotly_chart(fig)